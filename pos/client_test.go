package pos

import (
	"context"
	"github.com/MinseokOh/matic-sdk-go/types"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/stretchr/testify/assert"
	"math/big"
	"testing"
)

var (
	RootDummyERC20  = common.HexToAddress("0x655f2166b0709cd575202630952d71e2bb0d61af")
	ChildDummyERC20 = common.HexToAddress("0xfe4f5145f6e09952a5ba9e956ed0c25e3fa4c7f1")

	RootDummyERC721  = common.HexToAddress("0x16F7EF3774c59264C46E5063b1111bCFd6e7A72f")
	ChildDummyERC721 = common.HexToAddress("0xbD88C3A7c0e242156a46Fbdf87141Aa6D0c0c649")

	RootDummyERC1155  = common.HexToAddress("0x2e3Ef7931F2d0e4a7da3dea950FF3F19269d9063")
	ChildDummyERC1155 = common.HexToAddress("0xA07e45A987F19E25176c877d98388878622623FA")

	ChildWETH = common.HexToAddress("0xA6FA4fB5f76172d178d61B04b0ecd319C5d1C0aa")
	Matic     = common.HexToAddress(types.MaticAddress)

	TestPrivateKey, _ = crypto.HexToECDSA("1c28edecd1cdfbdb2e32c38d8e06ed042f3e31fb05d9884e5322376cce4706d4")
	TestTxOption      = &types.TxOption{
		PrivateKey: TestPrivateKey,
		TxType:     types.DynamicFeeTxType,
	}
)

func TestClient_BuildPayloadForExit(t *testing.T) {
	client, err := NewClient(NewDefaultConfig(types.TestNet))
	t.Log(client.config)
	assert.NoError(t, err)

	txHash := common.HexToHash("0x4363c691323e4de0e7c4019f1bdbf3c1adc12d63217c7dc374344d4edbcef7c7")
	payload, err := client.BuildPayloadForExit(context.Background(), txHash, types.ERC20Transfer, 0)
	assert.NoError(t, err)

	expectedPayload := `0xf907d184329e38b0b90140e634843710b626db85ed306ba005aad4cc3e80f29a32561c3338c24a077873f15d14997a92263f5850b05b3e6eb518965615840368325722657326b73f17d52cce119d183550f4cde2f3f779f5cede3439ab7709fad3f875de81ddfad23979025a84a0483fa7778058f6b826b785bbeb32cc0596ccefc37edaa1f413af7fdcab5df4074cb52849665685f354f02cedad7de42802c1e90ab75162fccf9dbcb902542c78c6d0f752c1dcdce94807400531a5eda481fafb0352ee802e50369b40806bb42bd094e60f7b3e92f6cf9e22a739d3f44203a107774904acd2dd59ea197d0b367acf964b2f58f8dc18247120c55c3fa8ed124e6dcff492276e16f0c2212b9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af94615498e87b01bc998aff1a270013813b743ea626e698409720c681b951b8ec8401fac93e846413fdb2a0e030fcc05d17ab10ddeeb3cd1d4ec15ece5c52e7469beb4428f4a704889bfe42a05fae9fe2a0f81fe71cc31e721f9333e39eece5cf55df379e0a7d8f9e3ecd372bb902eb02f902e701828804bf901ddf89b94a6fa4fb5f76172d178d61b04b0ecd319c5d1c0aaf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa0000000000000000000000000f51d45a201978a5b9fd90ca6c97bb95dc66d3258a00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000002386f26fc10000f9013d940000000000000000000000000000000000001010f884a04dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63a00000000000000000000000000000000000000000000000000000000000001010a0000000000000000000000000f51d45a201978a5b9fd90ca6c97bb95dc66d3258a00000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484b8a000000000000000000000000000000000000000000000000000013cafa1470fc00000000000000000000000000000000000000000000000007c2961f6b186fc3a0000000000000000000000000000000000000000000003f86e15eec88a732cf70000000000000000000000000000000000000000000000007c282547103fec7a0000000000000000000000000000000000000000000003f86e172b782bba3cb7b90348f90345f851a0d74f2683d7a7e72c940d7aeb5562ec601e0ca8706c4be475d3bad7b17dcfef1280808080808080a05ece88778ea1c4b48f676e63d6ba51cf842cee61b4da75335c5fd8a69913a2cf8080808080808080f902ef30b902eb02f902e701828804bf901ddf89b94a6fa4fb5f76172d178d61b04b0ecd319c5d1c0aaf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa0000000000000000000000000f51d45a201978a5b9fd90ca6c97bb95dc66d3258a00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000002386f26fc10000f9013d940000000000000000000000000000000000001010f884a04dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63a00000000000000000000000000000000000000000000000000000000000001010a0000000000000000000000000f51d45a201978a5b9fd90ca6c97bb95dc66d3258a00000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484b8a000000000000000000000000000000000000000000000000000013cafa1470fc00000000000000000000000000000000000000000000000007c2961f6b186fc3a0000000000000000000000000000000000000000000003f86e15eec88a732cf70000000000000000000000000000000000000000000000007c282547103fec7a0000000000000000000000000000000000000000000003f86e172b782bba3cb782008080`
	assert.Equal(t, expectedPayload, hexutil.Encode(payload))
}

func TestClient_DepositEtherFor(t *testing.T) {
	client, err := NewClient(NewDefaultConfig(types.TestNet))
	assert.NoError(t, err)

	hash, err := client.DepositEtherFor(context.Background(), big.NewInt(123456789), TestTxOption)
	assert.NoError(t, err)
	t.Log("txHash", hash.String())
}

func TestClient_IsCheckPointed(t *testing.T) {
	client, err := NewClient(NewDefaultConfig(types.TestNet))
	assert.NoError(t, err)

	checkPointed, err := client.IsCheckPointed(context.Background(), common.HexToHash("0xc55da852f91aad02018e92870cc440928c7ef4693e3fc5dcf8b31df58ae97f94"))
	assert.NoError(t, err)
	assert.Equal(t, checkPointed, true)
}
